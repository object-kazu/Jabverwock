

## garbage code

        # removeFront = str.gsub(/.*{/, "") 
        # removeBack = removeFront.gsub(/}/, "")
        # removeRET = removeBack.gsub(/\n/, "")

# def check_type(type, instance, nilable=false)
      #   if (instance.nil?)
      #     unless nilable
      #       raise ArgumentError::new("non-nil constraint vioration")
      #     end # nilable
      #   else
      #     unless instance.kind_of?(type)
      #       raise ArgumentError::new("type mismatch: #{instance.class} for #{type}")
      #     end # instance, type
      #   end # instance.nil?

      #   return instance
      # end

      # def isString? (instance, nilable=false)
      #   check_type(String, instance)
      # end

      # def isInt?(instance, nilable=false)
      #   check_type(Integer,instance)
      # end
      
      # def isExistCssString(str)
        
      #   return false if str.empty?

      #   if !str.include?("{") || !str.include?("}")
      #     return false
      #   end
        
      #   removeFront = str.gsub(/.*{/, "") 
      #   removeBack = removeFront.gsub(/}/, "")
      #   removeRET = removeBack.gsub(/\n/, "")
        
      #   if removeRET.nil? || removeRET == ""
      #     return false
      #   end

      #   return true
      # end
      
      # tab揃え
      # def tabCount(str)
      #   str.count("\t")
      # end
      
      # def addTab(str:, num:)
      #   isString?(str)
      #   isInt? num
        
      #   tabMax = num
      #   ans = ""
      #   str.each_line { |l|
      #     tn = tabCount(l)
      #     df = tabMax - tn
      #     ans += addHeadTab(str: l, num: df)
      #   }
      #   ans
      # end

      

      # def writer(arr) # arr -> sentence
      #   arr.inject("") do |temp, s|
      #     temp << s    
      #   end
      # end
      # def tabCount(str)
      #   isString? str
      #   str = removeLastTAB str
      #   str.count $TAB
      # end

      # def addTab(element)
      #   ans = ""
      #   element.lines{ |l|
      #     ans += "\t" + l
      #   }
      #   ans
      # end
      
      # def addTabEachLine (str)
      #   ans = ""
      #   str.each_line { |l|
      #     ans += addHeadTab(str: l, num: 1)
      #   }
      #   ans
      # end
      
      # def addHeadTab(str:, num:)
      #   isString? str
      #   isInt? num
      #   t = makeSerialTab num
      #   t += str
        
      # end

      # def makeSerialTab (num)
      #   num.times.inject("") do |t| 
      #     t += "" #$TAB
      #   end
      # end
      
      # def getTabNumber (testStr)
      #   isString?(testStr)
        
      #   testStr.each_line{ |l|
      #     if l.count($TAB) > 0
      #       return tabCount(l) 
      #     end  
      #   }
      #   return 0
      # end
            # def removeLastTAB(text)
      #   isString? text
      #   text.gsub(/\t$/, "")
      # end

# def insertTextLoop(arr)        
      #   newText = ""
      #   arr.each do |l|
      #     newText << addTabEachLine(l)
      #   end
      #   newText
      # end

      
      # def removeHeadTAB(text)
      #   isString? text
      #   text.gsub(/^\t/, "")
      # end
      
# def removeAllTab
    #   return self unless self.include?("\t")
    #   self.gsub!(/\t/, "")
    # end
    # def insertText(arr,txt)
    #   index = KString.insertIndex arr
    #   KString.insertTextLoop arr, index, txt
      
    #   #temp = ""
    #   #n = tabNumberHeaderTag + 1
    #   # arr.each_with_index do |l,ind|
    #   #   if ind == index
    #   #     temp << KString.addTabEachLine(txt) << "\n"
    #   #   end
    #   #   temp  << l
    #   # end
      
    #   # temp
    # end

    # def insertTextLoop(arr,index,original)
    #   newText = ""
    #   arr.each_with_index do |l,ind|
    #     if ind == index
    #       newText << KString.addTabEachLine(original) << "\n"
    #     end
    #     newText  << l
    #   end
    #   newText
    # end

   # def writer(arr) # arr -> sentence
   #   arr.inject("") do |temp, s|
   #     temp << s    
   #   end
   #  end

    # def insertIndex (arr)
    #   arr.index { |i| i =~ /<\/head>/ }
    # end

    # def tabCount(str)
    #   str.count("\t")
    # end
    # def reader(str) # sentence -> arr
    #   str.lines
    # end

# def addTab(element)
    #   ans = ""
    #   element.lines{ |l|
    #     ans += "\t" + l
    #   }
    #   ans
    # end
